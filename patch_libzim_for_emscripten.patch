diff --git a/src/debug.h b/src/debug.h
index 2cfe8e1..2f96d3a 100644
--- a/src/debug.h
+++ b/src/debug.h
@@ -27,10 +27,6 @@
 # define ASSERT(left, operator, right) (void(0))
 #else
 
-#if !defined(_WIN32) && !defined(__APPLE__) && !defined(__ANDROID__)
-#include <execinfo.h>
-#endif
-
 template<typename T, typename U>
 void _on_assert_fail(const char* vara, const char* op, const char* varb,
                      T a, U b, const char* file, int line)  {
@@ -38,16 +34,6 @@
       vara << "[" << a << "] " << op << " " << varb << "[" << b << "]" <<
       std::endl;
 
-#if !defined(_WIN32) && !defined(__APPLE__) && !defined(__ANDROID__)
-  void *callstack[64];
-  size_t size;
-  size = backtrace(callstack, 64);
-  char** strings = backtrace_symbols(callstack, size);
-  for (size_t i=0; i<size; i++) {
-    std::cerr << strings[i] << std::endl;
-  }
-  free(strings);
-#endif
   exit(1);
 }
 
diff --git a/src/file_reader.cpp b/src/file_reader.cpp
index a752d70..85c69f3 100644
--- a/src/file_reader.cpp
+++ b/src/file_reader.cpp
@@ -129,24 +129,6 @@
 
 std::shared_ptr<const Buffer> FileReader::get_buffer(offset_t offset, zsize_t size) const {
   ASSERT(size, <=, _size);
-#ifdef ENABLE_USE_MMAP
-  try {
-    auto found_range = source->locate(_offset+offset, size);
-    auto first_part_containing_it = found_range.first;
-    if (++first_part_containing_it != found_range.second) {
-      throw MMapException();
-    }
-
-    // The range is in only one part
-    auto range = found_range.first->first;
-    auto part = found_range.first->second;
-    auto local_offset = offset + _offset - range.min;
-    ASSERT(size, <=, part->size());
-    int fd = part->fhandle().getNativeHandle();
-    auto buffer = std::shared_ptr<const Buffer>(new MMapBuffer(fd, local_offset, size));
-    return buffer;
-  } catch(MMapException& e)
-#endif
   {
     // The range is several part, or we are on Windows.
     // We will have to do some memory copies :/
